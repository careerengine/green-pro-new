//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GreenPro.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GreenProDbEntities : DbContext
    {
        public GreenProDbEntities()
            : base("name=GreenProDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<AdhocUserPackage> AdhocUserPackages { get; set; }
        public virtual DbSet<AdhocUserPackagesAddon> AdhocUserPackagesAddons { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AutomaticPayment> AutomaticPayments { get; set; }
        public virtual DbSet<CarServiceEntry> CarServiceEntries { get; set; }
        public virtual DbSet<CarType> CarTypes { get; set; }
        public virtual DbSet<CarUser> CarUsers { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CrewAdminMember> CrewAdminMembers { get; set; }
        public virtual DbSet<Garage_CarDaySetting> Garage_CarDaySetting { get; set; }
        public virtual DbSet<Garage_LeaderSetting> Garage_LeaderSetting { get; set; }
        public virtual DbSet<GarageMaxCar> GarageMaxCars { get; set; }
        public virtual DbSet<Garage> Garages { get; set; }
        public virtual DbSet<GarageTeam> GarageTeams { get; set; }
        public virtual DbSet<GargesTimeingSlot> GargesTimeingSlots { get; set; }
        public virtual DbSet<GarrageWeekday> GarrageWeekdays { get; set; }
        public virtual DbSet<LeaderCarJob> LeaderCarJobs { get; set; }
        public virtual DbSet<LeaderGarageDay> LeaderGarageDays { get; set; }
        public virtual DbSet<LeaderMember> LeaderMembers { get; set; }
        public virtual DbSet<LeaderWork> LeaderWorks { get; set; }
        public virtual DbSet<LogDetailCarSide> LogDetailCarSides { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Package_Services> Package_Services { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<PaypalAutoPayment> PaypalAutoPayments { get; set; }
        public virtual DbSet<PayPalLog> PayPalLogs { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<UnAssignedCar> UnAssignedCars { get; set; }
        public virtual DbSet<UserPackage> UserPackages { get; set; }
        public virtual DbSet<UserPackagesAddon> UserPackagesAddons { get; set; }
        public virtual DbSet<UserTransaction> UserTransactions { get; set; }
        public virtual DbSet<Weekday> Weekdays { get; set; }
        public virtual DbSet<WorkDone> WorkDones { get; set; }
        public virtual DbSet<WorkerGarage> WorkerGarages { get; set; }
        public virtual DbSet<WorkLogDetail> WorkLogDetails { get; set; }
    
        public virtual ObjectResult<GetAllAvailableGaragesCitiesList_Result> GetAllAvailableGaragesCitiesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAvailableGaragesCitiesList_Result>("GetAllAvailableGaragesCitiesList");
        }
    
        public virtual ObjectResult<GetGarage_CarDaySettingPaymentDetail_Result> GetGarage_CarDaySettingPaymentDetail(Nullable<System.DateTime> serviceDate)
        {
            var serviceDateParameter = serviceDate.HasValue ?
                new ObjectParameter("ServiceDate", serviceDate) :
                new ObjectParameter("ServiceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGarage_CarDaySettingPaymentDetail_Result>("GetGarage_CarDaySettingPaymentDetail", serviceDateParameter);
        }
    
        public virtual ObjectResult<GetServicesByCarId_Result> GetServicesByCarId(Nullable<int> carId)
        {
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServicesByCarId_Result>("GetServicesByCarId", carIdParameter);
        }
    
        public virtual int SetNextWashedDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetNextWashedDate");
        }
    
        [DbFunction("GreenProDbEntities", "Splitstring_to_table")]
        public virtual IQueryable<string> Splitstring_to_table(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[GreenProDbEntities].[Splitstring_to_table](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int Sproc_InsertOrUpdateGarage_CarDaySetting(Nullable<int> garageTeamId, Nullable<int> entityTypeKey, string entityTypeValues, Nullable<int> garageId, string serviceDay, Nullable<System.DateTime> carServiceDate, Nullable<bool> isLocked, Nullable<bool> isPaid)
        {
            var garageTeamIdParameter = garageTeamId.HasValue ?
                new ObjectParameter("GarageTeamId", garageTeamId) :
                new ObjectParameter("GarageTeamId", typeof(int));
    
            var entityTypeKeyParameter = entityTypeKey.HasValue ?
                new ObjectParameter("EntityTypeKey", entityTypeKey) :
                new ObjectParameter("EntityTypeKey", typeof(int));
    
            var entityTypeValuesParameter = entityTypeValues != null ?
                new ObjectParameter("EntityTypeValues", entityTypeValues) :
                new ObjectParameter("EntityTypeValues", typeof(string));
    
            var garageIdParameter = garageId.HasValue ?
                new ObjectParameter("GarageId", garageId) :
                new ObjectParameter("GarageId", typeof(int));
    
            var serviceDayParameter = serviceDay != null ?
                new ObjectParameter("ServiceDay", serviceDay) :
                new ObjectParameter("ServiceDay", typeof(string));
    
            var carServiceDateParameter = carServiceDate.HasValue ?
                new ObjectParameter("CarServiceDate", carServiceDate) :
                new ObjectParameter("CarServiceDate", typeof(System.DateTime));
    
            var isLockedParameter = isLocked.HasValue ?
                new ObjectParameter("IsLocked", isLocked) :
                new ObjectParameter("IsLocked", typeof(bool));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_InsertOrUpdateGarage_CarDaySetting", garageTeamIdParameter, entityTypeKeyParameter, entityTypeValuesParameter, garageIdParameter, serviceDayParameter, carServiceDateParameter, isLockedParameter, isPaidParameter);
        }
    
        public virtual int Sproc_InsertOrUpdateLeaderSetting(Nullable<int> garageTeamId, Nullable<int> entityTypeKey, string entityTypeValues, Nullable<int> garageId, string serviceDay)
        {
            var garageTeamIdParameter = garageTeamId.HasValue ?
                new ObjectParameter("GarageTeamId", garageTeamId) :
                new ObjectParameter("GarageTeamId", typeof(int));
    
            var entityTypeKeyParameter = entityTypeKey.HasValue ?
                new ObjectParameter("EntityTypeKey", entityTypeKey) :
                new ObjectParameter("EntityTypeKey", typeof(int));
    
            var entityTypeValuesParameter = entityTypeValues != null ?
                new ObjectParameter("EntityTypeValues", entityTypeValues) :
                new ObjectParameter("EntityTypeValues", typeof(string));
    
            var garageIdParameter = garageId.HasValue ?
                new ObjectParameter("GarageId", garageId) :
                new ObjectParameter("GarageId", typeof(int));
    
            var serviceDayParameter = serviceDay != null ?
                new ObjectParameter("ServiceDay", serviceDay) :
                new ObjectParameter("ServiceDay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sproc_InsertOrUpdateLeaderSetting", garageTeamIdParameter, entityTypeKeyParameter, entityTypeValuesParameter, garageIdParameter, serviceDayParameter);
        }
    }
}
